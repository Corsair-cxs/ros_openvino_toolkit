/*
 * Copyright (c) 2018 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @brief A header file with declaration for FaceDetection Class
 * @file object_detection.hpp
 */
#ifndef DYNAMIC_VINO_LIB_INFERENCES_FACE_DETECTION_H
#define DYNAMIC_VINO_LIB_INFERENCES_FACE_DETECTION_H
#include <object_msgs/Object.h>
#include <object_msgs/ObjectInBox.h>
#include <object_msgs/ObjectsInBoxes.h>
#include <ros/ros.h>

#include <memory>
#include <vector>
#include <string>
#include <map>

#include "dynamic_vino_lib/results/face_detection_result.h"
#include "dynamic_vino_lib/models/face_detection_model.h"
#include "dynamic_vino_lib/engines/engine.h"
#include "dynamic_vino_lib/inferences/base_inference.h"
#include "dynamic_vino_lib/inferences/base_filter.h"
#include "inference_engine.hpp"
#include "opencv2/opencv.hpp"
// namespace
namespace dynamic_vino_lib
{
/**
 * @class FaceDetection
 * @brief Class to load face detection model and perform face detection.
 */
class FaceDetection : public BaseInference
{
public:
  using Result = dynamic_vino_lib::FaceDetectionResult;
  using Filter = dynamic_vino_lib::FaceDetectionResultFilter;
  explicit FaceDetection(bool, double);
  ~FaceDetection() override;
  /**
   * @brief Load the face detection model.
   */
  void loadNetwork(std::shared_ptr<Models::FaceDetectionModel>);
  /**
   * @brief Enqueue a frame to this class.
   * The frame will be buffered but not infered yet.
   * @param[in] frame The frame to be enqueued.
   * @param[in] input_frame_loc The location of the enqueued frame with respect
   * to the frame generated by the input device.
   * @return Whether this operation is successful.
   */
  bool enqueue(const cv::Mat&, const cv::Rect&) override;

  /**
   * @brief This function will fetch the results of the previous inference and
   * stores the results in a result buffer array. All buffered frames will be
   * cleared.
   * @return Whether the Inference object fetches a result this time
   */
  bool fetchResults() override;
  /**
   * @brief Get the length of the buffer result array.
   * @return The length of the buffer result array.
   */
  int getResultsLength() const override;
  /**
   * @brief Get the location of result with respect
   * to the frame generated by the input device.
   * @param[in] idx The index of the result.
   */
  const Result* getLocationResult(int idx) const override;
  /**
   * @brief Show the observed detection result either through image window
     or ROS topic.
   */
  void observeOutput(const std::shared_ptr<Outputs::BaseOutput>& output);
  /**
   * @brief Get the name of the Inference instance.
   * @return The name of the Inference instance.
   */
  const std::string getName() const override;

  const std::vector<cv::Rect> getFilteredROIs(const std::string filter_conditions) const override;
  /**
   * @brief Calculate the IoU ratio for the given rectangles.
   * @return IoU Ratio of the given rectangles.
   */
  static double calcIoU(const cv::Rect& box_1, const cv::Rect& box_2);

private:
  std::shared_ptr<Models::FaceDetectionModel> valid_model_;
  std::shared_ptr<Filter> result_filter_;
  std::vector<Result> results_;
  double show_output_thresh_ = 0;
  bool enable_roi_constraint_ = false;
};
}  // namespace dynamic_vino_lib
#endif  // DYNAMIC_VINO_LIB_INFERENCES_FACE_DETECTION_H
